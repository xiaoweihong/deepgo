// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pimpOilEvent.proto

package go_kafka

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OilGunEventType int32

const (
	OilGunEventType_Oil_Gun_Event_Type_Unknown OilGunEventType = 0
	OilGunEventType_Oil_Gun_Event_Type_Lift    OilGunEventType = 1
	OilGunEventType_Oil_Gun_Event_Type_Hang    OilGunEventType = 2
)

var OilGunEventType_name = map[int32]string{
	0: "Oil_Gun_Event_Type_Unknown",
	1: "Oil_Gun_Event_Type_Lift",
	2: "Oil_Gun_Event_Type_Hang",
}
var OilGunEventType_value = map[string]int32{
	"Oil_Gun_Event_Type_Unknown": 0,
	"Oil_Gun_Event_Type_Lift":    1,
	"Oil_Gun_Event_Type_Hang":    2,
}

func (x OilGunEventType) String() string {
	return proto.EnumName(OilGunEventType_name, int32(x))
}
func (OilGunEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_pimpOilEvent_a19b8550864b856d, []int{0}
}

type OilEvent struct {
	EventId              string            `protobuf:"bytes,1,opt,name=EventId,proto3" json:"EventId,omitempty"`
	OiltankId            string            `protobuf:"bytes,2,opt,name=OiltankId,proto3" json:"OiltankId,omitempty"`
	OilGunId             string            `protobuf:"bytes,3,opt,name=OilGunId,proto3" json:"OilGunId,omitempty"`
	Timestamp            string            `protobuf:"bytes,4,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	OilType              string            `protobuf:"bytes,5,opt,name=OilType,proto3" json:"OilType,omitempty"`
	Amount               float32           `protobuf:"fixed32,6,opt,name=Amount,proto3" json:"Amount,omitempty"`
	EventType            OilGunEventType   `protobuf:"varint,7,opt,name=EventType,proto3,enum=OilGunEventType" json:"EventType,omitempty"`
	AdditionalInfos      map[string]string `protobuf:"bytes,16,rep,name=AdditionalInfos,proto3" json:"AdditionalInfos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *OilEvent) Reset()         { *m = OilEvent{} }
func (m *OilEvent) String() string { return proto.CompactTextString(m) }
func (*OilEvent) ProtoMessage()    {}
func (*OilEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_pimpOilEvent_a19b8550864b856d, []int{0}
}
func (m *OilEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OilEvent.Unmarshal(m, b)
}
func (m *OilEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OilEvent.Marshal(b, m, deterministic)
}
func (dst *OilEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OilEvent.Merge(dst, src)
}
func (m *OilEvent) XXX_Size() int {
	return xxx_messageInfo_OilEvent.Size(m)
}
func (m *OilEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_OilEvent.DiscardUnknown(m)
}

var xxx_messageInfo_OilEvent proto.InternalMessageInfo

func (m *OilEvent) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *OilEvent) GetOiltankId() string {
	if m != nil {
		return m.OiltankId
	}
	return ""
}

func (m *OilEvent) GetOilGunId() string {
	if m != nil {
		return m.OilGunId
	}
	return ""
}

func (m *OilEvent) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *OilEvent) GetOilType() string {
	if m != nil {
		return m.OilType
	}
	return ""
}

func (m *OilEvent) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *OilEvent) GetEventType() OilGunEventType {
	if m != nil {
		return m.EventType
	}
	return OilGunEventType_Oil_Gun_Event_Type_Unknown
}

func (m *OilEvent) GetAdditionalInfos() map[string]string {
	if m != nil {
		return m.AdditionalInfos
	}
	return nil
}

type OilEventWithPlate struct {
	EventId              string            `protobuf:"bytes,1,opt,name=EventId,proto3" json:"EventId,omitempty"`
	PlateText            string            `protobuf:"bytes,2,opt,name=PlateText,proto3" json:"PlateText,omitempty"`
	ArrivalTime          string            `protobuf:"bytes,3,opt,name=ArrivalTime,proto3" json:"ArrivalTime,omitempty"`
	DepartureTime        string            `protobuf:"bytes,4,opt,name=DepartureTime,proto3" json:"DepartureTime,omitempty"`
	OiltankId            string            `protobuf:"bytes,5,opt,name=OiltankId,proto3" json:"OiltankId,omitempty"`
	OilGunId             string            `protobuf:"bytes,6,opt,name=OilGunId,proto3" json:"OilGunId,omitempty"`
	StartTime            string            `protobuf:"bytes,7,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	FinishTime           string            `protobuf:"bytes,8,opt,name=FinishTime,proto3" json:"FinishTime,omitempty"`
	OilType              string            `protobuf:"bytes,9,opt,name=OilType,proto3" json:"OilType,omitempty"`
	Amount               float32           `protobuf:"fixed32,10,opt,name=Amount,proto3" json:"Amount,omitempty"`
	AdditionalInfos      map[string]string `protobuf:"bytes,16,rep,name=AdditionalInfos,proto3" json:"AdditionalInfos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *OilEventWithPlate) Reset()         { *m = OilEventWithPlate{} }
func (m *OilEventWithPlate) String() string { return proto.CompactTextString(m) }
func (*OilEventWithPlate) ProtoMessage()    {}
func (*OilEventWithPlate) Descriptor() ([]byte, []int) {
	return fileDescriptor_pimpOilEvent_a19b8550864b856d, []int{1}
}
func (m *OilEventWithPlate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OilEventWithPlate.Unmarshal(m, b)
}
func (m *OilEventWithPlate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OilEventWithPlate.Marshal(b, m, deterministic)
}
func (dst *OilEventWithPlate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OilEventWithPlate.Merge(dst, src)
}
func (m *OilEventWithPlate) XXX_Size() int {
	return xxx_messageInfo_OilEventWithPlate.Size(m)
}
func (m *OilEventWithPlate) XXX_DiscardUnknown() {
	xxx_messageInfo_OilEventWithPlate.DiscardUnknown(m)
}

var xxx_messageInfo_OilEventWithPlate proto.InternalMessageInfo

func (m *OilEventWithPlate) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *OilEventWithPlate) GetPlateText() string {
	if m != nil {
		return m.PlateText
	}
	return ""
}

func (m *OilEventWithPlate) GetArrivalTime() string {
	if m != nil {
		return m.ArrivalTime
	}
	return ""
}

func (m *OilEventWithPlate) GetDepartureTime() string {
	if m != nil {
		return m.DepartureTime
	}
	return ""
}

func (m *OilEventWithPlate) GetOiltankId() string {
	if m != nil {
		return m.OiltankId
	}
	return ""
}

func (m *OilEventWithPlate) GetOilGunId() string {
	if m != nil {
		return m.OilGunId
	}
	return ""
}

func (m *OilEventWithPlate) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *OilEventWithPlate) GetFinishTime() string {
	if m != nil {
		return m.FinishTime
	}
	return ""
}

func (m *OilEventWithPlate) GetOilType() string {
	if m != nil {
		return m.OilType
	}
	return ""
}

func (m *OilEventWithPlate) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *OilEventWithPlate) GetAdditionalInfos() map[string]string {
	if m != nil {
		return m.AdditionalInfos
	}
	return nil
}

type PedestrianBehavior struct {
	ArrivalTime          string   `protobuf:"bytes,1,opt,name=ArrivalTime,proto3" json:"ArrivalTime,omitempty"`
	DepartureTime        string   `protobuf:"bytes,2,opt,name=DepartureTime,proto3" json:"DepartureTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PedestrianBehavior) Reset()         { *m = PedestrianBehavior{} }
func (m *PedestrianBehavior) String() string { return proto.CompactTextString(m) }
func (*PedestrianBehavior) ProtoMessage()    {}
func (*PedestrianBehavior) Descriptor() ([]byte, []int) {
	return fileDescriptor_pimpOilEvent_a19b8550864b856d, []int{2}
}
func (m *PedestrianBehavior) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PedestrianBehavior.Unmarshal(m, b)
}
func (m *PedestrianBehavior) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PedestrianBehavior.Marshal(b, m, deterministic)
}
func (dst *PedestrianBehavior) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PedestrianBehavior.Merge(dst, src)
}
func (m *PedestrianBehavior) XXX_Size() int {
	return xxx_messageInfo_PedestrianBehavior.Size(m)
}
func (m *PedestrianBehavior) XXX_DiscardUnknown() {
	xxx_messageInfo_PedestrianBehavior.DiscardUnknown(m)
}

var xxx_messageInfo_PedestrianBehavior proto.InternalMessageInfo

func (m *PedestrianBehavior) GetArrivalTime() string {
	if m != nil {
		return m.ArrivalTime
	}
	return ""
}

func (m *PedestrianBehavior) GetDepartureTime() string {
	if m != nil {
		return m.DepartureTime
	}
	return ""
}

type FaceBehavior struct {
	ArrivalTime          string   `protobuf:"bytes,1,opt,name=ArrivalTime,proto3" json:"ArrivalTime,omitempty"`
	DepartureTime        string   `protobuf:"bytes,2,opt,name=DepartureTime,proto3" json:"DepartureTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FaceBehavior) Reset()         { *m = FaceBehavior{} }
func (m *FaceBehavior) String() string { return proto.CompactTextString(m) }
func (*FaceBehavior) ProtoMessage()    {}
func (*FaceBehavior) Descriptor() ([]byte, []int) {
	return fileDescriptor_pimpOilEvent_a19b8550864b856d, []int{3}
}
func (m *FaceBehavior) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaceBehavior.Unmarshal(m, b)
}
func (m *FaceBehavior) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaceBehavior.Marshal(b, m, deterministic)
}
func (dst *FaceBehavior) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaceBehavior.Merge(dst, src)
}
func (m *FaceBehavior) XXX_Size() int {
	return xxx_messageInfo_FaceBehavior.Size(m)
}
func (m *FaceBehavior) XXX_DiscardUnknown() {
	xxx_messageInfo_FaceBehavior.DiscardUnknown(m)
}

var xxx_messageInfo_FaceBehavior proto.InternalMessageInfo

func (m *FaceBehavior) GetArrivalTime() string {
	if m != nil {
		return m.ArrivalTime
	}
	return ""
}

func (m *FaceBehavior) GetDepartureTime() string {
	if m != nil {
		return m.DepartureTime
	}
	return ""
}

func init() {
	proto.RegisterType((*OilEvent)(nil), "OilEvent")
	proto.RegisterMapType((map[string]string)(nil), "OilEvent.AdditionalInfosEntry")
	proto.RegisterType((*OilEventWithPlate)(nil), "OilEventWithPlate")
	proto.RegisterMapType((map[string]string)(nil), "OilEventWithPlate.AdditionalInfosEntry")
	proto.RegisterType((*PedestrianBehavior)(nil), "PedestrianBehavior")
	proto.RegisterType((*FaceBehavior)(nil), "FaceBehavior")
	proto.RegisterEnum("OilGunEventType", OilGunEventType_name, OilGunEventType_value)
}

func init() { proto.RegisterFile("pimpOilEvent.proto", fileDescriptor_pimpOilEvent_a19b8550864b856d) }

var fileDescriptor_pimpOilEvent_a19b8550864b856d = []byte{
	// 476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0x4f, 0x8f, 0xd2, 0x40,
	0x18, 0xc6, 0x6d, 0x11, 0x58, 0xde, 0x55, 0xb7, 0x4e, 0x36, 0xda, 0xa0, 0xc1, 0x4a, 0x4c, 0x24,
	0x1e, 0x7a, 0x58, 0x2f, 0xc6, 0x1b, 0xc4, 0xfd, 0x43, 0x62, 0xc2, 0x8a, 0xa8, 0x17, 0x13, 0x32,
	0xee, 0xcc, 0xc2, 0x84, 0xe9, 0x4c, 0x33, 0xbc, 0x45, 0xf9, 0x9e, 0x7e, 0x0c, 0x3f, 0x84, 0xe9,
	0xb4, 0x74, 0xa1, 0x0b, 0xc4, 0x83, 0xd9, 0xdb, 0xbc, 0xcf, 0xf3, 0xfe, 0x21, 0xcf, 0x2f, 0x14,
	0x48, 0x2c, 0xa2, 0x78, 0x20, 0xe4, 0xe9, 0x82, 0x2b, 0x0c, 0x63, 0xa3, 0x51, 0xb7, 0xff, 0xb8,
	0x70, 0xb0, 0x92, 0x88, 0x0f, 0x75, 0xfb, 0xe8, 0x33, 0xdf, 0x09, 0x9c, 0x4e, 0x63, 0xb8, 0x2a,
	0xc9, 0x73, 0x68, 0x0c, 0x84, 0x44, 0xaa, 0x66, 0x7d, 0xe6, 0xbb, 0xd6, 0xbb, 0x11, 0x48, 0xd3,
	0xee, 0x38, 0x4f, 0x54, 0x9f, 0xf9, 0x15, 0x6b, 0x16, 0x75, 0x3a, 0x39, 0x12, 0x11, 0x9f, 0x23,
	0x8d, 0x62, 0xff, 0x7e, 0x36, 0x59, 0x08, 0xe9, 0xc5, 0x81, 0x90, 0xa3, 0x65, 0xcc, 0xfd, 0x6a,
	0x76, 0x31, 0x2f, 0xc9, 0x13, 0xa8, 0x75, 0x23, 0x9d, 0x28, 0xf4, 0x6b, 0x81, 0xd3, 0x71, 0x87,
	0x79, 0x45, 0x42, 0x68, 0xd8, 0x1f, 0x65, 0x67, 0xea, 0x81, 0xd3, 0x79, 0x74, 0xe2, 0x85, 0xd9,
	0xb5, 0x42, 0x1f, 0xde, 0xb4, 0x90, 0x0b, 0x38, 0xea, 0x32, 0x26, 0x50, 0x68, 0x45, 0x65, 0x5f,
	0x5d, 0xeb, 0xb9, 0xef, 0x05, 0x95, 0xce, 0xe1, 0x49, 0x2b, 0x2c, 0xa2, 0x28, 0x35, 0x9c, 0x2a,
	0x34, 0xcb, 0x61, 0x79, 0xac, 0xd9, 0x83, 0xe3, 0x6d, 0x8d, 0xc4, 0x83, 0xca, 0x8c, 0x2f, 0xf3,
	0xc4, 0xd2, 0x27, 0x39, 0x86, 0xea, 0x82, 0xca, 0x84, 0xe7, 0x49, 0x65, 0xc5, 0x7b, 0xf7, 0x9d,
	0xd3, 0xfe, 0x5d, 0x81, 0xc7, 0xab, 0xb3, 0xdf, 0x04, 0x4e, 0x2f, 0x25, 0x45, 0xbe, 0x3f, 0x77,
	0xdb, 0x32, 0xe2, 0xbf, 0x70, 0x95, 0x7b, 0x21, 0x90, 0x00, 0x0e, 0xbb, 0xc6, 0x88, 0x05, 0x95,
	0x69, 0xa2, 0x79, 0xf4, 0xeb, 0x12, 0x79, 0x05, 0x0f, 0x3f, 0xf0, 0x98, 0x1a, 0x4c, 0x0c, 0xb7,
	0x3d, 0x19, 0x81, 0x4d, 0x71, 0x93, 0x6e, 0x75, 0x1f, 0xdd, 0xda, 0x6d, 0xba, 0x9f, 0x91, 0x1a,
	0xb4, 0xbb, 0xeb, 0xd9, 0x64, 0x21, 0x90, 0x16, 0xc0, 0x99, 0x50, 0x62, 0x3e, 0xb5, 0xf6, 0x81,
	0xb5, 0xd7, 0x94, 0x75, 0xfa, 0x8d, 0x5d, 0xf4, 0x61, 0x83, 0xfe, 0xa7, 0x5d, 0x34, 0x5f, 0x87,
	0xb7, 0x62, 0xbd, 0x43, 0xac, 0xdf, 0x81, 0x5c, 0x72, 0xc6, 0xe7, 0x68, 0x04, 0x55, 0x3d, 0x3e,
	0xa5, 0x0b, 0xa1, 0x4d, 0x19, 0x8f, 0xf3, 0x0f, 0x78, 0xdc, 0x2d, 0x78, 0xda, 0x5f, 0xe1, 0xc1,
	0x19, 0xbd, 0xe2, 0xff, 0x7b, 0xef, 0x9b, 0x19, 0x1c, 0x95, 0xfe, 0x38, 0xa4, 0x05, 0xcd, 0x81,
	0x90, 0xe3, 0xf3, 0x44, 0x8d, 0xad, 0x38, 0x4e, 0xd5, 0xf1, 0x17, 0x35, 0x53, 0xfa, 0xa7, 0xf2,
	0xee, 0x91, 0x67, 0xf0, 0x74, 0x8b, 0xff, 0x51, 0x5c, 0xa3, 0xe7, 0xec, 0x30, 0x2f, 0xa8, 0x9a,
	0x78, 0x6e, 0xef, 0x25, 0xbc, 0xb8, 0xd2, 0x51, 0xc8, 0x38, 0x8f, 0x27, 0x52, 0x28, 0xb4, 0x2f,
	0x46, 0x91, 0x86, 0x6c, 0x12, 0x46, 0x9a, 0x71, 0xf9, 0xa3, 0x66, 0x3f, 0x49, 0x6f, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0xeb, 0x01, 0x8e, 0x08, 0xa8, 0x04, 0x00, 0x00,
}
