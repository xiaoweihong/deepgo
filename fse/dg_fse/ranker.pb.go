// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ranker.proto

/*
Package dg_fse is a generated protocol buffer package.
It is generated from these files:
	ranker.proto
It has these top-level messages:
	PingRequest
	PingResponse
	VersionRequest
	VersionResponse
	ConfigRequest
	ConfigResponse
	RankRequestContext
	RankResponseContext
	RankFeatureRequest
	RankFeatureResponse
	RankRepoOpRequest
	RankRepoOpResponse
	RankFeatureOpRequest
	RankFeatureOpResponse
	RankAttributeOpRequest
	RankAttributeOpResponse
	RankAttributeOperation
	RankFeatureOperation
	RankRepoOperation
	RankItem
	AddFeaturesRequest
	AddFeaturesResponse
	ObjectProperty
	ObjectAttribute
*/
package dg_fse

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FeatureDataType int32

const (
	FeatureDataType_FEATURE_DATA_TYPE_UNKNOWN FeatureDataType = 0
	FeatureDataType_FEATURE_DATA_TYPE_FLOAT   FeatureDataType = 1
	FeatureDataType_FEATURE_DATA_TYPE_SHORT   FeatureDataType = 2
	FeatureDataType_FEATURE_DATA_TYPE_INT8    FeatureDataType = 3
)

var FeatureDataType_name = map[int32]string{
	0: "FEATURE_DATA_TYPE_UNKNOWN",
	1: "FEATURE_DATA_TYPE_FLOAT",
	2: "FEATURE_DATA_TYPE_SHORT",
	3: "FEATURE_DATA_TYPE_INT8",
}
var FeatureDataType_value = map[string]int32{
	"FEATURE_DATA_TYPE_UNKNOWN": 0,
	"FEATURE_DATA_TYPE_FLOAT":   1,
	"FEATURE_DATA_TYPE_SHORT":   2,
	"FEATURE_DATA_TYPE_INT8":    3,
}

func (x FeatureDataType) String() string {
	return proto.EnumName(FeatureDataType_name, int32(x))
}
func (FeatureDataType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// -库操作类型, 分为增加, 删除, 更新和查找
type RepoOperation int32

const (
	// -默认操作, 不可用
	RepoOperation_REPO_OPERATION_DEFAULT RepoOperation = 0
	// -增加一个新的库, 调用者需要保证库ID唯一
	RepoOperation_REPO_OPERATION_ADD RepoOperation = 1
	// -删除一个已存在的库
	RepoOperation_REPO_OPERATION_DELETE RepoOperation = 2
	// -更新一个已存在的库
	RepoOperation_REPO_OPERATION_UPDATE RepoOperation = 3
	// -查找一个或多个已存在的库
	RepoOperation_REPO_OPERATION_QUERY RepoOperation = 4
)

var RepoOperation_name = map[int32]string{
	0: "REPO_OPERATION_DEFAULT",
	1: "REPO_OPERATION_ADD",
	2: "REPO_OPERATION_DELETE",
	3: "REPO_OPERATION_UPDATE",
	4: "REPO_OPERATION_QUERY",
}
var RepoOperation_value = map[string]int32{
	"REPO_OPERATION_DEFAULT": 0,
	"REPO_OPERATION_ADD":     1,
	"REPO_OPERATION_DELETE":  2,
	"REPO_OPERATION_UPDATE":  3,
	"REPO_OPERATION_QUERY":   4,
}

func (x RepoOperation) String() string {
	return proto.EnumName(RepoOperation_name, int32(x))
}
func (RepoOperation) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// -特征操作类型, 分为增加, 删除, 更新和查找
type ObjectOperation int32

const (
	// -默认操作, 不可用
	ObjectOperation_OBJECT_OPERATION_DEFAULT ObjectOperation = 0
	// -增加一个新特征, 调用者需要保证特征ID唯一
	ObjectOperation_OBJECT_OPERATION_ADD ObjectOperation = 1
	// -删除一个已存在的特征
	ObjectOperation_OBJECT_OPERATION_DELETE ObjectOperation = 2
	// -更新一个已存在的特征
	ObjectOperation_OBJECT_OPERATION_UPDATE ObjectOperation = 3
	// -查询一个或多个已存在的特征
	ObjectOperation_OBJECT_OPERATION_QUERY ObjectOperation = 4
)

var ObjectOperation_name = map[int32]string{
	0: "OBJECT_OPERATION_DEFAULT",
	1: "OBJECT_OPERATION_ADD",
	2: "OBJECT_OPERATION_DELETE",
	3: "OBJECT_OPERATION_UPDATE",
	4: "OBJECT_OPERATION_QUERY",
}
var ObjectOperation_value = map[string]int32{
	"OBJECT_OPERATION_DEFAULT": 0,
	"OBJECT_OPERATION_ADD":     1,
	"OBJECT_OPERATION_DELETE":  2,
	"OBJECT_OPERATION_UPDATE":  3,
	"OBJECT_OPERATION_QUERY":   4,
}

func (x ObjectOperation) String() string {
	return proto.EnumName(ObjectOperation_name, int32(x))
}
func (ObjectOperation) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// -库的级别
type RepoLevel int32

const (
	RepoLevel_REPO_LEVEL_NOT_USED RepoLevel = 0
	// -数据主要存储在磁盘上, 在计算过程中会发生磁盘-内存间交换. 支持十亿级别的数据.
	RepoLevel_REPO_LEVEL_ON_STORAGE RepoLevel = 1
	// -未实现. 数组存储在内存上
	RepoLevel_REPO_LEVEL_ON_RAM RepoLevel = 2
	// -数据存储在GPU显存上, 在计算过程中直接使用, 不需要发生IO操作
	RepoLevel_REPO_LEVEL_ON_GPU RepoLevel = 3
	// -未实现. 数据部分在内存, 部分在磁盘
	RepoLevel_REPO_LEVEL_ON_RAM_STORAGE RepoLevel = 4
	// -未实现. 数据部分在显存, 部分在磁盘
	RepoLevel_REPO_LEVEL_ON_GPU_STORAGE RepoLevel = 5
	// -未实现. 数据部分在内存, 部分在显存
	RepoLevel_REPO_LEVEL_ON_RAM_GPU RepoLevel = 6
	// -未实现. 数据部分在内存, 部分在显存, 部分在磁盘
	RepoLevel_REPO_LEVEL_ON_RAM_GPU_STORAGE RepoLevel = 7
)

var RepoLevel_name = map[int32]string{
	0: "REPO_LEVEL_NOT_USED",
	1: "REPO_LEVEL_ON_STORAGE",
	2: "REPO_LEVEL_ON_RAM",
	3: "REPO_LEVEL_ON_GPU",
	4: "REPO_LEVEL_ON_RAM_STORAGE",
	5: "REPO_LEVEL_ON_GPU_STORAGE",
	6: "REPO_LEVEL_ON_RAM_GPU",
	7: "REPO_LEVEL_ON_RAM_GPU_STORAGE",
}
var RepoLevel_value = map[string]int32{
	"REPO_LEVEL_NOT_USED":           0,
	"REPO_LEVEL_ON_STORAGE":         1,
	"REPO_LEVEL_ON_RAM":             2,
	"REPO_LEVEL_ON_GPU":             3,
	"REPO_LEVEL_ON_RAM_STORAGE":     4,
	"REPO_LEVEL_ON_GPU_STORAGE":     5,
	"REPO_LEVEL_ON_RAM_GPU":         6,
	"REPO_LEVEL_ON_RAM_GPU_STORAGE": 7,
}

func (x RepoLevel) String() string {
	return proto.EnumName(RepoLevel_name, int32(x))
}
func (RepoLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type AttributeOperation int32

const (
	// -缺省操作，不对属性做任何修改
	AttributeOperation_ATTRIBUTE_OPERATION_DEFAULT AttributeOperation = 0
	// -添加属性操作，特征不得与任何属性有关联关系
	AttributeOperation_ATTRIBUTE_OPERATION_ADD AttributeOperation = 1
	// -删除属性操作，特征必须关联属性
	AttributeOperation_ATTRIBUTE_OPERATION_DELETE AttributeOperation = 2
	// -更新属性操作，特征必须关联属性
	AttributeOperation_ATTRIBUTE_OPERATION_UPDATE AttributeOperation = 3
	// -查找属性操作，特征必须关联属性
	AttributeOperation_ATTRIBUTE_OPERATION_QUERY AttributeOperation = 4
)

var AttributeOperation_name = map[int32]string{
	0: "ATTRIBUTE_OPERATION_DEFAULT",
	1: "ATTRIBUTE_OPERATION_ADD",
	2: "ATTRIBUTE_OPERATION_DELETE",
	3: "ATTRIBUTE_OPERATION_UPDATE",
	4: "ATTRIBUTE_OPERATION_QUERY",
}
var AttributeOperation_value = map[string]int32{
	"ATTRIBUTE_OPERATION_DEFAULT": 0,
	"ATTRIBUTE_OPERATION_ADD":     1,
	"ATTRIBUTE_OPERATION_DELETE":  2,
	"ATTRIBUTE_OPERATION_UPDATE":  3,
	"ATTRIBUTE_OPERATION_QUERY":   4,
}

func (x AttributeOperation) String() string {
	return proto.EnumName(AttributeOperation_name, int32(x))
}
func (AttributeOperation) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PingResponse struct {
	// -返回上下文
	Context *RankResponseContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PingResponse) GetContext() *RankResponseContext {
	if m != nil {
		return m.Context
	}
	return nil
}

type VersionRequest struct {
}

func (m *VersionRequest) Reset()                    { *m = VersionRequest{} }
func (m *VersionRequest) String() string            { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()               {}
func (*VersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type VersionResponse struct {
	// -返回上下文
	Context *RankResponseContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
	Version string               `protobuf:"bytes,2,opt,name=Version,json=version" json:"Version,omitempty"`
}

func (m *VersionResponse) Reset()                    { *m = VersionResponse{} }
func (m *VersionResponse) String() string            { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()               {}
func (*VersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *VersionResponse) GetContext() *RankResponseContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *VersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type ConfigRequest struct {
}

func (m *ConfigRequest) Reset()                    { *m = ConfigRequest{} }
func (m *ConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigRequest) ProtoMessage()               {}
func (*ConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ConfigResponse struct {
	// -返回上下文
	Context *RankResponseContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
	Config  string               `protobuf:"bytes,2,opt,name=Config,json=config" json:"Config,omitempty"`
}

func (m *ConfigResponse) Reset()                    { *m = ConfigResponse{} }
func (m *ConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigResponse) ProtoMessage()               {}
func (*ConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ConfigResponse) GetContext() *RankResponseContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *ConfigResponse) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

// -请求上下文
type RankRequestContext struct {
	// -请求Session, 调用者填写,会在返回时携带,用于唯一标示一次请求. 可为空
	SessionId string `protobuf:"bytes,1,opt,name=SessionId,json=sessionId" json:"SessionId,omitempty"`
	// -用户名信息，需要开启权限验证功能. 可为空
	UserName string `protobuf:"bytes,2,opt,name=UserName,json=userName" json:"UserName,omitempty"`
	// -Token信息，需要开启权限验证功能. 可为空
	Token string `protobuf:"bytes,3,opt,name=Token,json=token" json:"Token,omitempty"`
	// -扩展参数
	Params map[string]string `protobuf:"bytes,5,rep,name=Params,json=params" json:"Params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RankRequestContext) Reset()                    { *m = RankRequestContext{} }
func (m *RankRequestContext) String() string            { return proto.CompactTextString(m) }
func (*RankRequestContext) ProtoMessage()               {}
func (*RankRequestContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RankRequestContext) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *RankRequestContext) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *RankRequestContext) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *RankRequestContext) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

// -返回上下文
type RankResponseContext struct {
	// -响应Session，如果请求Session不存在，生成UUID，否则复制请求的Session
	SessionId string `protobuf:"bytes,1,opt,name=SessionId,json=sessionId" json:"SessionId,omitempty"`
	// -响应状态信息
	Status string `protobuf:"bytes,2,opt,name=Status,json=status" json:"Status,omitempty"`
	// -状态为错误的响应错误信息
	Message string `protobuf:"bytes,3,opt,name=Message,json=message" json:"Message,omitempty"`
}

func (m *RankResponseContext) Reset()                    { *m = RankResponseContext{} }
func (m *RankResponseContext) String() string            { return proto.CompactTextString(m) }
func (*RankResponseContext) ProtoMessage()               {}
func (*RankResponseContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RankResponseContext) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *RankResponseContext) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *RankResponseContext) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// -特征比对服务请求
type RankFeatureRequest struct {
	// -请求上下文
	Context *RankRequestContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
	// -待比对的特征信息
	ObjectFeature *ObjectProperty `protobuf:"bytes,3,opt,name=ObjectFeature,json=objectFeature" json:"ObjectFeature,omitempty"`
	// -候选特征列表. 默认为空表示1:N比对, 不为空进行1:1或1:n比对
	ObjectCandidates []*ObjectProperty `protobuf:"bytes,4,rep,name=ObjectCandidates,json=objectCandidates" json:"ObjectCandidates,omitempty"`
	// -比对参数列表, 可选值如下
	// -ScoreThreshold, 数据类型为float, 指定比对分数的最小阈值, 小于该值不返回, 默认为0表示不过滤
	// -MaxCandidates 数据类型为int, 指定返回Top K
	// -PageSize 数据类型为int, 分页返回值, 指定每页大小. 默认为100
	// -PageIndex 数据类型为int, 分页页数
	// -Normalization. 数据类型为bool, 指定是否需要对分数计算结果进行归一化处理. 默认为false
	// -ShowAttributes. 数据类型为bool, 指定是否返回比对结果的详细属性,比如时间,地点等信息. 默认为false
	// -FilterABC. 数据类型为int, 并可使用逗号分割传入多个值表示一个集合. 用于动态属性过滤, FliterABC表示过滤自定义的ABC属性, ABC属性值在传入的集合中
	// -RangeXYZ. 数据类型为int-int, 表示一个值的范围. 用于动态属性过滤, FliterXYZ表示过滤自定义的XYZ属性, 属性值在传入的范围之间.
	// -RepoId 必需. 数据类型为int, 指定在哪个库中进行比对.
	// -Locations 必需. 数据类型为int, 并可使用逗号分割传入多个值. 比如"[1,2,3]"表示只在地点是1,2,3的特征中进行比对
	// -StartTime 必需. 数据类型为int64.//-StartTime 必需. 数据类型为int64.
	// -EndTime 必需. 数据类型为int64, 与StartTime配合使用,指定被特征的时间范围.
	Params map[string]string `protobuf:"bytes,6,rep,name=Params,json=params" json:"Params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RankFeatureRequest) Reset()                    { *m = RankFeatureRequest{} }
func (m *RankFeatureRequest) String() string            { return proto.CompactTextString(m) }
func (*RankFeatureRequest) ProtoMessage()               {}
func (*RankFeatureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RankFeatureRequest) GetContext() *RankRequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RankFeatureRequest) GetObjectFeature() *ObjectProperty {
	if m != nil {
		return m.ObjectFeature
	}
	return nil
}

func (m *RankFeatureRequest) GetObjectCandidates() []*ObjectProperty {
	if m != nil {
		return m.ObjectCandidates
	}
	return nil
}

func (m *RankFeatureRequest) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

// -特征比对服务返回
type RankFeatureResponse struct {
	// -返回上下文
	Context *RankResponseContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
	// -比对结果列表
	Candidates []*RankItem `protobuf:"bytes,2,rep,name=Candidates,json=candidates" json:"Candidates,omitempty"`
}

func (m *RankFeatureResponse) Reset()                    { *m = RankFeatureResponse{} }
func (m *RankFeatureResponse) String() string            { return proto.CompactTextString(m) }
func (*RankFeatureResponse) ProtoMessage()               {}
func (*RankFeatureResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RankFeatureResponse) GetContext() *RankResponseContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RankFeatureResponse) GetCandidates() []*RankItem {
	if m != nil {
		return m.Candidates
	}
	return nil
}

// -库操作服务请求
type RankRepoOpRequest struct {
	// -请求上下文信息
	Context *RankRequestContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
	// -库操作请求信息
	Repo *RankRepoOperation `protobuf:"bytes,2,opt,name=Repo,json=repo" json:"Repo,omitempty"`
}

func (m *RankRepoOpRequest) Reset()                    { *m = RankRepoOpRequest{} }
func (m *RankRepoOpRequest) String() string            { return proto.CompactTextString(m) }
func (*RankRepoOpRequest) ProtoMessage()               {}
func (*RankRepoOpRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RankRepoOpRequest) GetContext() *RankRequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RankRepoOpRequest) GetRepo() *RankRepoOperation {
	if m != nil {
		return m.Repo
	}
	return nil
}

// -库操作服务返回
type RankRepoOpResponse struct {
	// -返回上下文信息
	Context *RankResponseContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
	// -库操作返回信息
	Repos []*RankRepoOperation `protobuf:"bytes,2,rep,name=Repos,json=repos" json:"Repos,omitempty"`
}

func (m *RankRepoOpResponse) Reset()                    { *m = RankRepoOpResponse{} }
func (m *RankRepoOpResponse) String() string            { return proto.CompactTextString(m) }
func (*RankRepoOpResponse) ProtoMessage()               {}
func (*RankRepoOpResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RankRepoOpResponse) GetContext() *RankResponseContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RankRepoOpResponse) GetRepos() []*RankRepoOperation {
	if m != nil {
		return m.Repos
	}
	return nil
}

// -特征操作请求
type RankFeatureOpRequest struct {
	// -请求上下文
	Context *RankRequestContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
	// -请求详细信息
	Features *RankFeatureOperation `protobuf:"bytes,2,opt,name=Features,json=features" json:"Features,omitempty"`
}

func (m *RankFeatureOpRequest) Reset()                    { *m = RankFeatureOpRequest{} }
func (m *RankFeatureOpRequest) String() string            { return proto.CompactTextString(m) }
func (*RankFeatureOpRequest) ProtoMessage()               {}
func (*RankFeatureOpRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *RankFeatureOpRequest) GetContext() *RankRequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RankFeatureOpRequest) GetFeatures() *RankFeatureOperation {
	if m != nil {
		return m.Features
	}
	return nil
}

// -特征操作返回
type RankFeatureOpResponse struct {
	// -返回上下文
	Context *RankResponseContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
	// -返回详细信息
	Features *RankFeatureOperation `protobuf:"bytes,2,opt,name=Features,json=features" json:"Features,omitempty"`
}

func (m *RankFeatureOpResponse) Reset()                    { *m = RankFeatureOpResponse{} }
func (m *RankFeatureOpResponse) String() string            { return proto.CompactTextString(m) }
func (*RankFeatureOpResponse) ProtoMessage()               {}
func (*RankFeatureOpResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *RankFeatureOpResponse) GetContext() *RankResponseContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RankFeatureOpResponse) GetFeatures() *RankFeatureOperation {
	if m != nil {
		return m.Features
	}
	return nil
}

type RankAttributeOpRequest struct {
	// -请求上下文
	Context *RankRequestContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
	// -请求详细信息
	Attributes *RankAttributeOperation `protobuf:"bytes,2,opt,name=Attributes,json=attributes" json:"Attributes,omitempty"`
}

func (m *RankAttributeOpRequest) Reset()                    { *m = RankAttributeOpRequest{} }
func (m *RankAttributeOpRequest) String() string            { return proto.CompactTextString(m) }
func (*RankAttributeOpRequest) ProtoMessage()               {}
func (*RankAttributeOpRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *RankAttributeOpRequest) GetContext() *RankRequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RankAttributeOpRequest) GetAttributes() *RankAttributeOperation {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type RankAttributeOpResponse struct {
	// -返回上下文
	Context *RankResponseContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
	// -返回详细信息
	Attributes *RankAttributeOperation `protobuf:"bytes,2,opt,name=Attributes,json=attributes" json:"Attributes,omitempty"`
}

func (m *RankAttributeOpResponse) Reset()                    { *m = RankAttributeOpResponse{} }
func (m *RankAttributeOpResponse) String() string            { return proto.CompactTextString(m) }
func (*RankAttributeOpResponse) ProtoMessage()               {}
func (*RankAttributeOpResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *RankAttributeOpResponse) GetContext() *RankResponseContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RankAttributeOpResponse) GetAttributes() *RankAttributeOperation {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type RankAttributeOperation struct {
	// -操作类型，增加, 删除, 更新或者查询
	Operation AttributeOperation `protobuf:"varint,1,opt,name=Operation,json=operation,enum=dg.fse.AttributeOperation" json:"Operation,omitempty"`
	// -属性列表，可同时增加、删除、更新或查询多条属性。
	Attributes []*ObjectAttribute `protobuf:"bytes,2,rep,name=Attributes,json=attributes" json:"Attributes,omitempty"`
}

func (m *RankAttributeOperation) Reset()                    { *m = RankAttributeOperation{} }
func (m *RankAttributeOperation) String() string            { return proto.CompactTextString(m) }
func (*RankAttributeOperation) ProtoMessage()               {}
func (*RankAttributeOperation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *RankAttributeOperation) GetOperation() AttributeOperation {
	if m != nil {
		return m.Operation
	}
	return AttributeOperation_ATTRIBUTE_OPERATION_DEFAULT
}

func (m *RankAttributeOperation) GetAttributes() []*ObjectAttribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// -特征操作请求信息
type RankFeatureOperation struct {
	// -待操作特征所属于的库ID, 增加特征时必需.
	RepoId string `protobuf:"bytes,1,opt,name=RepoId,json=repoId" json:"RepoId,omitempty"`
	// -操作类型, 增加, 删除, 更新或者查询
	Operation ObjectOperation `protobuf:"varint,2,opt,name=Operation,json=operation,enum=dg.fse.ObjectOperation" json:"Operation,omitempty"`
	// -特征列表. 可同时增加, 删除, 更新或者查询多条特征.
	ObjectFeatures []*ObjectProperty `protobuf:"bytes,3,rep,name=ObjectFeatures,json=objectFeatures" json:"ObjectFeatures,omitempty"`
	// -可选参数. 暂时未使用
	Params map[string]string `protobuf:"bytes,4,rep,name=Params,json=params" json:"Params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// -此处的locations和时间范围用于批量删除特征，只有当ObjectFeatures为空时才使用.
	Locations []string `protobuf:"bytes,5,rep,name=Locations,json=locations" json:"Locations,omitempty"`
	StartTime int64    `protobuf:"varint,6,opt,name=StartTime,json=startTime" json:"StartTime,omitempty"`
	EndTime   int64    `protobuf:"varint,7,opt,name=EndTime,json=endTime" json:"EndTime,omitempty"`
}

func (m *RankFeatureOperation) Reset()                    { *m = RankFeatureOperation{} }
func (m *RankFeatureOperation) String() string            { return proto.CompactTextString(m) }
func (*RankFeatureOperation) ProtoMessage()               {}
func (*RankFeatureOperation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *RankFeatureOperation) GetRepoId() string {
	if m != nil {
		return m.RepoId
	}
	return ""
}

func (m *RankFeatureOperation) GetOperation() ObjectOperation {
	if m != nil {
		return m.Operation
	}
	return ObjectOperation_OBJECT_OPERATION_DEFAULT
}

func (m *RankFeatureOperation) GetObjectFeatures() []*ObjectProperty {
	if m != nil {
		return m.ObjectFeatures
	}
	return nil
}

func (m *RankFeatureOperation) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *RankFeatureOperation) GetLocations() []string {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *RankFeatureOperation) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *RankFeatureOperation) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

// -特征操作具体信息
type RankRepoOperation struct {
	// -库ID, 必需. 增加库时需要保证唯一,否则返回错误. 其他操作需保证库ID存在, 否则返回错误
	RepoId string `protobuf:"bytes,1,opt,name=RepoId,json=repoId" json:"RepoId,omitempty"`
	// -具体操作内容. 包括增加, 删除, 修改和查找
	Operation RepoOperation `protobuf:"varint,2,opt,name=Operation,json=operation,enum=dg.fse.RepoOperation" json:"Operation,omitempty"`
	// -库级别. 在增加库和修改时必需, 其他操作不需要
	Level RepoLevel `protobuf:"varint,3,opt,name=Level,json=level,enum=dg.fse.RepoLevel" json:"Level,omitempty"`
	// -特征长度. 在增加库时必需且不可更新. 其他操作不需要
	FeatureLen int32 `protobuf:"varint,4,opt,name=FeatureLen,json=featureLen" json:"FeatureLen,omitempty"`
	// -特征的数据类型, 目前包括float/short/int8. 在增加库时必须且不可更新. 其他操作不需要.
	FeatureDataType FeatureDataType `protobuf:"varint,5,opt,name=FeatureDataType,json=featureDataType,enum=dg.fse.FeatureDataType" json:"FeatureDataType,omitempty"`
	// -库容量. 如果库级别定义为REPO_LEVEL_ON_GPU, 在增加库时必需, 表明库的最大容量. 其他级别和操作时不需要.
	Capacity int32 `protobuf:"varint,6,opt,name=Capacity,json=capacity" json:"Capacity,omitempty"`
	// -库当前大小, 仅在查询时作为返回值使用
	Size int32 `protobuf:"varint,7,opt,name=Size,json=size" json:"Size,omitempty"`
	// -可选参数. 目前可用参数包括:
	// -DynamicLoadNumber, 合法的数字型. 在库级别定义为REPO_LEVEL_ON_GPU时有效. 表明在启动时,按照数据新旧,最多加载到显存中的数据量
	// -GPUThreads, [1,1,0,1]字符串格式. 在库级别定义为REPO_LEVEL_ON_GPU时必需. 表明数据在多个GPU上的分布. [1,1,0,1]表示当前服务器有三个GPU卡, 但是数据被平均存储在0,1和3号GPU卡上.
	Params map[string]string `protobuf:"bytes,8,rep,name=Params,json=params" json:"Params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// -faiss index类型
	IndexType string `protobuf:"bytes,9,opt,name=IndexType,json=indexType" json:"IndexType,omitempty"`
	// -是否加载库中特征的属性选项
	NeedAttribute bool `protobuf:"varint,10,opt,name=NeedAttribute,json=needAttribute" json:"NeedAttribute,omitempty"`
	// -库的当前大小
	RepoSize int32 `protobuf:"varint,11,opt,name=RepoSize,json=repoSize" json:"RepoSize,omitempty"`
}

func (m *RankRepoOperation) Reset()                    { *m = RankRepoOperation{} }
func (m *RankRepoOperation) String() string            { return proto.CompactTextString(m) }
func (*RankRepoOperation) ProtoMessage()               {}
func (*RankRepoOperation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *RankRepoOperation) GetRepoId() string {
	if m != nil {
		return m.RepoId
	}
	return ""
}

func (m *RankRepoOperation) GetOperation() RepoOperation {
	if m != nil {
		return m.Operation
	}
	return RepoOperation_REPO_OPERATION_DEFAULT
}

func (m *RankRepoOperation) GetLevel() RepoLevel {
	if m != nil {
		return m.Level
	}
	return RepoLevel_REPO_LEVEL_NOT_USED
}

func (m *RankRepoOperation) GetFeatureLen() int32 {
	if m != nil {
		return m.FeatureLen
	}
	return 0
}

func (m *RankRepoOperation) GetFeatureDataType() FeatureDataType {
	if m != nil {
		return m.FeatureDataType
	}
	return FeatureDataType_FEATURE_DATA_TYPE_UNKNOWN
}

func (m *RankRepoOperation) GetCapacity() int32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *RankRepoOperation) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *RankRepoOperation) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *RankRepoOperation) GetIndexType() string {
	if m != nil {
		return m.IndexType
	}
	return ""
}

func (m *RankRepoOperation) GetNeedAttribute() bool {
	if m != nil {
		return m.NeedAttribute
	}
	return false
}

func (m *RankRepoOperation) GetRepoSize() int32 {
	if m != nil {
		return m.RepoSize
	}
	return 0
}

// -比对结果项
type RankItem struct {
	// -特征Id
	Id string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	// -比对分数
	Score float32 `protobuf:"fixed32,2,opt,name=Score,json=score" json:"Score,omitempty"`
	//    //-特征所在库Id, 默认不返回
	//    string RepoId = 7;
	//    //-特征地点信息, 默认不返回
	//    string Location = 8;
	//    //-特征时间信息, 默认不返回
	//    int64 Time = 9;
	//    //-特征其他属性, 默认不返回
	Attributes map[string]string `protobuf:"bytes,6,rep,name=Attributes,json=attributes" json:"Attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RankItem) Reset()                    { *m = RankItem{} }
func (m *RankItem) String() string            { return proto.CompactTextString(m) }
func (*RankItem) ProtoMessage()               {}
func (*RankItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *RankItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RankItem) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RankItem) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// -增加特征服务请求
type AddFeaturesRequest struct {
	// -请求上下文
	Context *RankRequestContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
	// -待增加特征信息
	ObjectFeatures []*ObjectProperty `protobuf:"bytes,2,rep,name=ObjectFeatures,json=objectFeatures" json:"ObjectFeatures,omitempty"`
}

func (m *AddFeaturesRequest) Reset()                    { *m = AddFeaturesRequest{} }
func (m *AddFeaturesRequest) String() string            { return proto.CompactTextString(m) }
func (*AddFeaturesRequest) ProtoMessage()               {}
func (*AddFeaturesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *AddFeaturesRequest) GetContext() *RankRequestContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *AddFeaturesRequest) GetObjectFeatures() []*ObjectProperty {
	if m != nil {
		return m.ObjectFeatures
	}
	return nil
}

// -增加特征服务返回
type AddFeaturesResponse struct {
	// -返回上下文
	Context        *RankResponseContext `protobuf:"bytes,1,opt,name=Context,json=context" json:"Context,omitempty"`
	ObjectFeatures []*ObjectProperty    `protobuf:"bytes,2,rep,name=ObjectFeatures,json=objectFeatures" json:"ObjectFeatures,omitempty"`
}

func (m *AddFeaturesResponse) Reset()                    { *m = AddFeaturesResponse{} }
func (m *AddFeaturesResponse) String() string            { return proto.CompactTextString(m) }
func (*AddFeaturesResponse) ProtoMessage()               {}
func (*AddFeaturesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *AddFeaturesResponse) GetContext() *RankResponseContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *AddFeaturesResponse) GetObjectFeatures() []*ObjectProperty {
	if m != nil {
		return m.ObjectFeatures
	}
	return nil
}

// -特征属性
type ObjectProperty struct {
	// -特征ID, 唯一标示一个特征, 必需.
	Id string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	// -地点, 表示特征的地点信息. 在增加时必需. 更新时可选用于指定新值.
	Location string `protobuf:"bytes,4,opt,name=Location,json=location" json:"Location,omitempty"`
	// -时间, 表示特征的时间信息. 在增加时必需. 更新时可选用于指定新值.
	Time int64 `protobuf:"varint,5,opt,name=Time,json=time" json:"Time,omitempty"`
	// -特征的BASE64表示. 在增加时必需. 更新时可选用于指定新值.
	Feature string `protobuf:"bytes,7,opt,name=Feature,json=feature" json:"Feature,omitempty"`
	// -特征的属性.
	Attribute *ObjectAttribute `protobuf:"bytes,10,opt,name=Attribute,json=attribute" json:"Attribute,omitempty"`
	// -特征的data_id
	DataId int32 `protobuf:"varint,11,opt,name=DataId,json=dataId" json:"DataId,omitempty"`
	// 以下字段为保证兼容而保留,不再使用
	// Decrepcated
	Type int32 `protobuf:"varint,2,opt,name=Type,json=type" json:"Type,omitempty"`
	// Decrepcated
	Operation ObjectOperation `protobuf:"varint,3,opt,name=Operation,json=operation,enum=dg.fse.ObjectOperation" json:"Operation,omitempty"`
	// Decrepcated
	Repository int32 `protobuf:"varint,6,opt,name=Repository,json=repository" json:"Repository,omitempty"`
	// Decrepcated
	Params map[string]string `protobuf:"bytes,8,rep,name=Params,json=params" json:"Params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Decrepcated
	// -特征的其他可选属性. Key为string类型, value为int32类型. Key如果不存在会自动创建. Key的总数量小于2^32
	Attributes map[string]string `protobuf:"bytes,9,rep,name=Attributes,json=attributes" json:"Attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ObjectProperty) Reset()                    { *m = ObjectProperty{} }
func (m *ObjectProperty) String() string            { return proto.CompactTextString(m) }
func (*ObjectProperty) ProtoMessage()               {}
func (*ObjectProperty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ObjectProperty) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ObjectProperty) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *ObjectProperty) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *ObjectProperty) GetFeature() string {
	if m != nil {
		return m.Feature
	}
	return ""
}

func (m *ObjectProperty) GetAttribute() *ObjectAttribute {
	if m != nil {
		return m.Attribute
	}
	return nil
}

func (m *ObjectProperty) GetDataId() int32 {
	if m != nil {
		return m.DataId
	}
	return 0
}

func (m *ObjectProperty) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ObjectProperty) GetOperation() ObjectOperation {
	if m != nil {
		return m.Operation
	}
	return ObjectOperation_OBJECT_OPERATION_DEFAULT
}

func (m *ObjectProperty) GetRepository() int32 {
	if m != nil {
		return m.Repository
	}
	return 0
}

func (m *ObjectProperty) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *ObjectProperty) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type ObjectAttribute struct {
	// -属性ID, 唯一表示一个属性, 可为空, 表示不存在属性.
	Id string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	// -属性值, Key和Value均为string类型, 若属性ID不空, 则属性值必须存在.
	Attributes map[string]string `protobuf:"bytes,2,rep,name=Attributes,json=attributes" json:"Attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// -属性操作，更新特征时使用。
	Operation AttributeOperation `protobuf:"varint,3,opt,name=Operation,json=operation,enum=dg.fse.AttributeOperation" json:"Operation,omitempty"`
}

func (m *ObjectAttribute) Reset()                    { *m = ObjectAttribute{} }
func (m *ObjectAttribute) String() string            { return proto.CompactTextString(m) }
func (*ObjectAttribute) ProtoMessage()               {}
func (*ObjectAttribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ObjectAttribute) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ObjectAttribute) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *ObjectAttribute) GetOperation() AttributeOperation {
	if m != nil {
		return m.Operation
	}
	return AttributeOperation_ATTRIBUTE_OPERATION_DEFAULT
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "dg.fse.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "dg.fse.PingResponse")
	proto.RegisterType((*VersionRequest)(nil), "dg.fse.VersionRequest")
	proto.RegisterType((*VersionResponse)(nil), "dg.fse.VersionResponse")
	proto.RegisterType((*ConfigRequest)(nil), "dg.fse.ConfigRequest")
	proto.RegisterType((*ConfigResponse)(nil), "dg.fse.ConfigResponse")
	proto.RegisterType((*RankRequestContext)(nil), "dg.fse.RankRequestContext")
	proto.RegisterType((*RankResponseContext)(nil), "dg.fse.RankResponseContext")
	proto.RegisterType((*RankFeatureRequest)(nil), "dg.fse.RankFeatureRequest")
	proto.RegisterType((*RankFeatureResponse)(nil), "dg.fse.RankFeatureResponse")
	proto.RegisterType((*RankRepoOpRequest)(nil), "dg.fse.RankRepoOpRequest")
	proto.RegisterType((*RankRepoOpResponse)(nil), "dg.fse.RankRepoOpResponse")
	proto.RegisterType((*RankFeatureOpRequest)(nil), "dg.fse.RankFeatureOpRequest")
	proto.RegisterType((*RankFeatureOpResponse)(nil), "dg.fse.RankFeatureOpResponse")
	proto.RegisterType((*RankAttributeOpRequest)(nil), "dg.fse.RankAttributeOpRequest")
	proto.RegisterType((*RankAttributeOpResponse)(nil), "dg.fse.RankAttributeOpResponse")
	proto.RegisterType((*RankAttributeOperation)(nil), "dg.fse.RankAttributeOperation")
	proto.RegisterType((*RankFeatureOperation)(nil), "dg.fse.RankFeatureOperation")
	proto.RegisterType((*RankRepoOperation)(nil), "dg.fse.RankRepoOperation")
	proto.RegisterType((*RankItem)(nil), "dg.fse.RankItem")
	proto.RegisterType((*AddFeaturesRequest)(nil), "dg.fse.AddFeaturesRequest")
	proto.RegisterType((*AddFeaturesResponse)(nil), "dg.fse.AddFeaturesResponse")
	proto.RegisterType((*ObjectProperty)(nil), "dg.fse.ObjectProperty")
	proto.RegisterType((*ObjectAttribute)(nil), "dg.fse.ObjectAttribute")
	proto.RegisterEnum("dg.fse.FeatureDataType", FeatureDataType_name, FeatureDataType_value)
	proto.RegisterEnum("dg.fse.RepoOperation", RepoOperation_name, RepoOperation_value)
	proto.RegisterEnum("dg.fse.ObjectOperation", ObjectOperation_name, ObjectOperation_value)
	proto.RegisterEnum("dg.fse.RepoLevel", RepoLevel_name, RepoLevel_value)
	proto.RegisterEnum("dg.fse.AttributeOperation", AttributeOperation_name, AttributeOperation_value)
}

func init() { proto.RegisterFile("ranker.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x5f, 0x4f, 0xdc, 0xc6,
	0x16, 0xc7, 0xfb, 0x7f, 0xcf, 0x06, 0x30, 0x03, 0x2c, 0xc6, 0x04, 0xc2, 0xb5, 0xee, 0xbd, 0x41,
	0x48, 0x97, 0x7b, 0x45, 0x6e, 0x54, 0x1a, 0x25, 0x51, 0x16, 0x30, 0x84, 0x76, 0xb3, 0xbb, 0xf5,
	0x7a, 0x13, 0xe5, 0xa1, 0x5a, 0x99, 0xdd, 0x01, 0xb9, 0x80, 0xbd, 0xb5, 0x0d, 0x0a, 0x51, 0x55,
	0xf5, 0x29, 0xaa, 0xda, 0xaa, 0x8a, 0xd4, 0x0f, 0x50, 0xa9, 0xdf, 0x20, 0x9f, 0xa2, 0x1f, 0xa3,
	0x0f, 0x7d, 0xea, 0x17, 0xa8, 0xfa, 0x58, 0xcd, 0x8c, 0x3d, 0xf8, 0xdf, 0x92, 0x26, 0xee, 0x13,
	0x9c, 0xf9, 0xcd, 0x39, 0xe7, 0x77, 0xce, 0x99, 0x73, 0x66, 0xd6, 0x70, 0xc3, 0x31, 0xac, 0x13,
	0xec, 0x6c, 0x8c, 0x1c, 0xdb, 0xb3, 0x51, 0x69, 0x78, 0xbc, 0x71, 0xe4, 0x62, 0x65, 0x12, 0x6a,
	0x1d, 0xd3, 0x3a, 0xd6, 0xf0, 0xe7, 0xe7, 0xd8, 0xf5, 0x14, 0x15, 0x6e, 0x30, 0xd1, 0x1d, 0xd9,
	0x96, 0x8b, 0xd1, 0x5d, 0x28, 0xef, 0xd8, 0x96, 0x87, 0x5f, 0x78, 0x92, 0xb0, 0x2a, 0xac, 0xd5,
	0x36, 0x97, 0x36, 0x98, 0xe2, 0x86, 0x66, 0x58, 0x27, 0xc1, 0x36, 0x7f, 0x8b, 0x56, 0x1e, 0xb0,
	0x7f, 0x14, 0x11, 0xa6, 0x9e, 0x62, 0xc7, 0x35, 0x6d, 0x2b, 0x30, 0x7c, 0x08, 0xd3, 0x7c, 0x25,
	0x93, 0x6d, 0x24, 0x41, 0xd9, 0xb7, 0x24, 0xe5, 0x56, 0x85, 0xb5, 0xaa, 0x56, 0xbe, 0x60, 0xa2,
	0x32, 0x0d, 0x93, 0x3b, 0xb6, 0x75, 0x64, 0xf2, 0x68, 0xfa, 0x30, 0x15, 0x2c, 0x64, 0xf3, 0x59,
	0x87, 0x12, 0x33, 0xe4, 0xbb, 0x2c, 0x0d, 0xa8, 0xa4, 0xfc, 0x22, 0x00, 0x62, 0x8a, 0xd4, 0xa1,
	0xaf, 0x87, 0x6e, 0x42, 0xb5, 0x8b, 0x5d, 0xc2, 0xe9, 0x60, 0x48, 0xfd, 0x54, 0xb5, 0xaa, 0x1b,
	0x2c, 0x20, 0x19, 0x2a, 0x3d, 0x17, 0x3b, 0x2d, 0xe3, 0x0c, 0xfb, 0xe6, 0x2a, 0xe7, 0xbe, 0x8c,
	0xe6, 0xa0, 0xa8, 0xdb, 0x27, 0xd8, 0x92, 0xf2, 0x14, 0x28, 0x7a, 0x44, 0x40, 0x0f, 0xa1, 0xd4,
	0x31, 0x1c, 0xe3, 0xcc, 0x95, 0x8a, 0xab, 0xf9, 0xb5, 0xda, 0xe6, 0xbf, 0xa3, 0xa4, 0xc3, 0xbe,
	0x37, 0xd8, 0x46, 0xd5, 0xf2, 0x9c, 0x4b, 0xad, 0x34, 0xa2, 0x82, 0xfc, 0x21, 0xd4, 0x42, 0xcb,
	0x48, 0x84, 0xfc, 0x09, 0xbe, 0xf4, 0x89, 0x91, 0x7f, 0x89, 0xdb, 0x0b, 0xe3, 0xf4, 0x3c, 0xe0,
	0xc3, 0x84, 0x7b, 0xb9, 0x2d, 0x41, 0xc1, 0x30, 0x9b, 0x92, 0x99, 0xb7, 0x44, 0x58, 0x87, 0x52,
	0xd7, 0x33, 0xbc, 0x73, 0x37, 0x48, 0x97, 0x4b, 0x25, 0x52, 0xba, 0x27, 0xd8, 0x75, 0x8d, 0x63,
	0xec, 0xc7, 0x57, 0x3e, 0x63, 0xa2, 0xf2, 0x73, 0x8e, 0x25, 0x72, 0x0f, 0x1b, 0xde, 0xb9, 0x83,
	0xfd, 0x98, 0xd0, 0xff, 0xe3, 0xe5, 0x92, 0xc7, 0x47, 0x7e, 0x55, 0xad, 0xfb, 0x30, 0xd9, 0x3e,
	0xfc, 0x0c, 0x0f, 0x3c, 0xdf, 0x1a, 0x75, 0x56, 0xdb, 0xac, 0x07, 0xba, 0x0c, 0xec, 0x38, 0xf6,
	0x08, 0x3b, 0xde, 0xa5, 0x36, 0x69, 0x87, 0x37, 0xa3, 0x6d, 0x10, 0xd9, 0x86, 0x1d, 0xc3, 0x1a,
	0x9a, 0x43, 0xc3, 0xc3, 0xae, 0x54, 0xa0, 0x69, 0x1f, 0x67, 0x40, 0xb4, 0x63, 0xfb, 0x43, 0x05,
	0x2b, 0x25, 0x0b, 0x16, 0x8d, 0xf1, 0xef, 0x2e, 0xd8, 0x97, 0xac, 0x60, 0xdc, 0x49, 0xb6, 0x83,
	0xff, 0x3f, 0x80, 0x50, 0x1a, 0x72, 0x34, 0x18, 0x31, 0xac, 0x79, 0xe0, 0xe1, 0x33, 0x0d, 0x06,
	0x7c, 0x8f, 0xf2, 0x02, 0x66, 0x98, 0xc5, 0x91, 0xdd, 0x1e, 0x65, 0xab, 0xe3, 0x7f, 0xa0, 0x40,
	0xcc, 0xd0, 0x18, 0x6b, 0x9b, 0x8b, 0x51, 0x15, 0x62, 0x1e, 0x3b, 0x86, 0x47, 0x26, 0x4a, 0xc1,
	0xc1, 0x23, 0x5b, 0xf9, 0x22, 0xe8, 0x45, 0xe6, 0x39, 0x5b, 0xe0, 0xff, 0x85, 0x22, 0x31, 0x14,
	0xc4, 0x7c, 0x8d, 0xf3, 0x22, 0x71, 0xee, 0x2a, 0xaf, 0x04, 0x98, 0x0b, 0x25, 0x3e, 0x6b, 0xec,
	0x5b, 0x50, 0xf1, 0x2d, 0xb9, 0x7e, 0xfc, 0x37, 0x53, 0xce, 0xd0, 0x15, 0x8b, 0xca, 0x91, 0xbf,
	0x5b, 0xf9, 0x5a, 0x80, 0xf9, 0x18, 0x91, 0x6c, 0xa9, 0x78, 0x7f, 0x2a, 0xdf, 0x0b, 0x50, 0x27,
	0x5b, 0x1a, 0x9e, 0xe7, 0x98, 0x87, 0xe7, 0x5e, 0xe6, 0xac, 0x3c, 0x04, 0xe0, 0xb6, 0x02, 0x32,
	0x2b, 0x61, 0xc5, 0x90, 0xa7, 0x80, 0x0e, 0x18, 0x5c, 0x43, 0x79, 0x2d, 0xc0, 0x42, 0x82, 0x50,
	0xb6, 0xec, 0x64, 0xa5, 0xf4, 0x6d, 0x32, 0x47, 0xfe, 0x36, 0xb4, 0x05, 0x55, 0x2e, 0x50, 0x4e,
	0x53, 0x57, 0x59, 0x4a, 0xb1, 0x5a, 0xb5, 0xb9, 0xe6, 0x07, 0x31, 0x52, 0xe4, 0x08, 0x2f, 0x44,
	0xa7, 0x17, 0xc7, 0x23, 0x6c, 0xfe, 0xc8, 0xc5, 0x4e, 0x71, 0x60, 0xb1, 0x0e, 0x25, 0x72, 0xec,
	0xf9, 0xb4, 0x2f, 0x39, 0x54, 0x42, 0x77, 0xc3, 0x1c, 0x73, 0x94, 0x63, 0xcc, 0x51, 0x2a, 0xc1,
	0x87, 0x30, 0x15, 0x19, 0xd1, 0xae, 0x94, 0xbf, 0x76, 0xc4, 0x4e, 0x45, 0x66, 0xb4, 0x8b, 0x1e,
	0xf1, 0x01, 0xcb, 0x46, 0xf3, 0xda, 0x75, 0x27, 0x32, 0x6d, 0xc4, 0x92, 0x1b, 0xac, 0x69, 0x0f,
	0x28, 0xce, 0xae, 0xd5, 0xaa, 0x56, 0x3d, 0x0d, 0x16, 0xe8, 0xfd, 0xe6, 0x19, 0x8e, 0xa7, 0x9b,
	0x67, 0x58, 0x2a, 0xad, 0x0a, 0x6b, 0x79, 0xad, 0xea, 0x06, 0x0b, 0xe4, 0x1e, 0x53, 0xad, 0x21,
	0xc5, 0xca, 0x14, 0x2b, 0x63, 0x26, 0x66, 0x19, 0xdc, 0xbf, 0xe7, 0xc3, 0x93, 0xf3, 0x6d, 0x79,
	0xbf, 0x93, 0xcc, 0xfb, 0x3c, 0xcf, 0x41, 0x64, 0x3e, 0x85, 0xb2, 0x7e, 0x1b, 0x8a, 0x4d, 0x7c,
	0x81, 0x4f, 0xe9, 0x85, 0x38, 0xb5, 0x39, 0x13, 0x56, 0xa0, 0x80, 0x56, 0x3c, 0x25, 0x7f, 0xd0,
	0x0a, 0x80, 0x9f, 0xc4, 0x26, 0xb6, 0xa4, 0xc2, 0xaa, 0xb0, 0x56, 0xd4, 0xe0, 0x88, 0xaf, 0xa0,
	0x06, 0x4c, 0xfb, 0xf8, 0xae, 0xe1, 0x19, 0xfa, 0xe5, 0x08, 0x4b, 0xc5, 0x68, 0xed, 0x63, 0xb0,
	0x36, 0x7d, 0x14, 0x5d, 0x20, 0xaf, 0xa0, 0x1d, 0x63, 0x64, 0x0c, 0x4c, 0xef, 0x92, 0x26, 0xb8,
	0xa8, 0x55, 0x06, 0xbe, 0x8c, 0x10, 0x14, 0xba, 0xe6, 0x4b, 0x96, 0xdc, 0xa2, 0x56, 0x70, 0xcd,
	0x97, 0x18, 0x3d, 0xe0, 0x15, 0xaf, 0xd0, 0x8a, 0xff, 0x6b, 0xec, 0x44, 0x1e, 0x57, 0xee, 0x03,
	0x6b, 0x88, 0x5f, 0x50, 0xae, 0x55, 0xf6, 0x60, 0x31, 0x83, 0x05, 0xf4, 0x4f, 0x98, 0x6c, 0x61,
	0x3c, 0xe4, 0x3d, 0x21, 0xc1, 0xaa, 0xb0, 0x56, 0xd1, 0x26, 0xad, 0xf0, 0x22, 0xa1, 0x4c, 0x1c,
	0x51, 0x6a, 0x35, 0x46, 0xd9, 0xf1, 0xe5, 0x2c, 0x85, 0x7f, 0x23, 0x40, 0x25, 0xb8, 0x4a, 0xd1,
	0x14, 0xe4, 0x78, 0xad, 0x73, 0xe6, 0x90, 0xa8, 0x75, 0x07, 0xb6, 0xc3, 0xd4, 0x72, 0x5a, 0xd1,
	0x25, 0x02, 0x7a, 0x14, 0xe9, 0x6f, 0xf6, 0xc6, 0x58, 0x8d, 0x5f, 0xcb, 0x57, 0x33, 0xc2, 0xcf,
	0x45, 0xa8, 0xd1, 0xe5, 0x07, 0x30, 0x1d, 0x83, 0xdf, 0x89, 0xf3, 0x37, 0x02, 0xa0, 0xc6, 0x70,
	0x18, 0xf4, 0x63, 0xd6, 0xa9, 0x1e, 0x1f, 0x06, 0xb9, 0x77, 0x19, 0x06, 0xca, 0x77, 0x02, 0xcc,
	0x46, 0xc8, 0x64, 0x9d, 0xe8, 0xd9, 0xe8, 0xfc, 0x54, 0x08, 0x0c, 0x04, 0x5b, 0x12, 0x55, 0x95,
	0xa1, 0x12, 0x0c, 0x1f, 0xda, 0x5d, 0x55, 0xad, 0x12, 0xcc, 0x1e, 0x72, 0xf8, 0xe9, 0x64, 0x29,
	0xd2, 0xc9, 0x52, 0xf0, 0xfc, 0x81, 0x13, 0xbc, 0x65, 0xcb, 0xec, 0xe1, 0xec, 0xb7, 0x13, 0x99,
	0xbf, 0xd1, 0x53, 0x7b, 0xcd, 0xa0, 0xaf, 0xf2, 0xfa, 0x93, 0xb1, 0x42, 0x3a, 0xf1, 0x60, 0xe8,
	0x1f, 0xe4, 0xd2, 0x90, 0x4a, 0xd4, 0x39, 0xe9, 0x90, 0x1c, 0xeb, 0x3c, 0x8f, 0x34, 0x47, 0x64,
	0xc4, 0xe7, 0xff, 0xf2, 0x88, 0x5f, 0x01, 0xa0, 0x2f, 0x28, 0xd3, 0xb3, 0x9d, 0xa0, 0xc5, 0xc1,
	0xe1, 0x2b, 0xe8, 0x5e, 0xac, 0xa1, 0x95, 0xf4, 0xf4, 0xa6, 0x76, 0xf3, 0x5e, 0xe4, 0xfc, 0x57,
	0xa3, 0x6f, 0xec, 0x98, 0xfe, 0x75, 0x5d, 0xf0, 0xfe, 0x5d, 0x9b, 0xb5, 0x81, 0x7e, 0x15, 0x60,
	0x3a, 0x56, 0x9f, 0xc4, 0x29, 0xd9, 0x4f, 0xb9, 0xc5, 0x6f, 0x8f, 0x29, 0xee, 0x75, 0x61, 0x46,
	0x1f, 0x12, 0xf9, 0x77, 0x78, 0x48, 0x64, 0x8c, 0x72, 0xfd, 0x95, 0x90, 0xb8, 0x28, 0xd0, 0x32,
	0x2c, 0xee, 0xa9, 0x0d, 0xbd, 0xa7, 0xa9, 0xfd, 0xdd, 0x86, 0xde, 0xe8, 0xeb, 0xcf, 0x3b, 0x6a,
	0xbf, 0xd7, 0xfa, 0xb8, 0xd5, 0x7e, 0xd6, 0x12, 0x27, 0xd0, 0x12, 0x2c, 0x24, 0xe1, 0xbd, 0x66,
	0xbb, 0xa1, 0x8b, 0x42, 0x3a, 0xd8, 0x7d, 0xdc, 0xd6, 0x74, 0x31, 0x87, 0x64, 0xa8, 0x27, 0xc1,
	0x83, 0x96, 0xbe, 0x25, 0xe6, 0xd7, 0x7f, 0x10, 0x60, 0x32, 0x7a, 0xb1, 0xca, 0x50, 0xd7, 0xd4,
	0x4e, 0xbb, 0xdf, 0xee, 0xa8, 0x5a, 0x43, 0x3f, 0x68, 0xb7, 0xfa, 0xbb, 0xea, 0x5e, 0xa3, 0xd7,
	0xd4, 0xc5, 0x09, 0x54, 0x07, 0x14, 0xc3, 0x1a, 0xbb, 0xbb, 0xa2, 0x80, 0x16, 0x61, 0x3e, 0xa1,
	0xd3, 0x54, 0x75, 0x55, 0xcc, 0xa5, 0x40, 0xbd, 0xce, 0x6e, 0x43, 0x57, 0xc5, 0x3c, 0x92, 0x60,
	0x2e, 0x06, 0x7d, 0xd2, 0x53, 0xb5, 0xe7, 0x62, 0x61, 0xfd, 0x47, 0x7e, 0x08, 0xae, 0x78, 0xdd,
	0x04, 0xa9, 0xbd, 0xfd, 0x91, 0xba, 0xa3, 0xa7, 0x32, 0x93, 0x60, 0x2e, 0x81, 0x32, 0x6e, 0x4b,
	0xb0, 0x90, 0xa2, 0xe7, 0xb3, 0x4b, 0x03, 0x39, 0x3f, 0x19, 0xea, 0x09, 0x30, 0x60, 0xf8, 0x9b,
	0x00, 0x55, 0xfe, 0x3a, 0x40, 0x0b, 0x30, 0x4b, 0x23, 0x69, 0xaa, 0x4f, 0xd5, 0x66, 0xbf, 0xd5,
	0xd6, 0xfb, 0xbd, 0xae, 0xba, 0x2b, 0x4e, 0xf0, 0xe8, 0x19, 0xd0, 0x6e, 0xf5, 0xbb, 0x7a, 0x5b,
	0x6b, 0xec, 0xab, 0xa2, 0x80, 0xe6, 0x61, 0x26, 0x0a, 0x69, 0x8d, 0x27, 0x62, 0x2e, 0xb9, 0xbc,
	0xdf, 0xe9, 0x89, 0x79, 0x72, 0x38, 0x12, 0xbb, 0xb9, 0xb1, 0x42, 0x12, 0xde, 0xef, 0xf4, 0x38,
	0x5c, 0x4c, 0xd2, 0x20, 0xda, 0xc4, 0x70, 0x09, 0xfd, 0x03, 0x96, 0x53, 0x21, 0xae, 0x5d, 0x5e,
	0x7f, 0x43, 0xee, 0xb4, 0xe4, 0x2b, 0xfc, 0x16, 0x2c, 0x35, 0x74, 0x5d, 0x3b, 0xd8, 0xee, 0xe9,
	0x6a, 0x6a, 0x4d, 0x96, 0x60, 0x21, 0x6d, 0x03, 0x2b, 0xcb, 0x0a, 0xc8, 0xe9, 0xda, 0x7e, 0x65,
	0xc6, 0xe0, 0xbc, 0x38, 0xcb, 0xb0, 0x98, 0x86, 0xfb, 0xf5, 0xd9, 0x7c, 0x5d, 0x80, 0x99, 0xae,
	0x79, 0x66, 0x9e, 0x1a, 0x8e, 0xe9, 0x5d, 0x76, 0xb1, 0x73, 0x61, 0x0e, 0x30, 0xba, 0x03, 0x85,
	0x8e, 0x69, 0x1d, 0xa3, 0xd9, 0xa0, 0xc9, 0x43, 0x9f, 0xf8, 0xe4, 0xb9, 0xe8, 0x22, 0xbb, 0x04,
	0x95, 0x09, 0x74, 0x9f, 0x7f, 0x57, 0x43, 0xfc, 0xa6, 0x8b, 0x7e, 0xc4, 0x93, 0x17, 0x12, 0xeb,
	0x21, 0xed, 0xea, 0x3e, 0xf6, 0xd8, 0x47, 0x32, 0xc4, 0x5f, 0xa2, 0x91, 0xcf, 0x71, 0x72, 0x3d,
	0xbe, 0xcc, 0xb5, 0x1f, 0xc7, 0xbb, 0x33, 0xe5, 0xf7, 0x76, 0x60, 0x45, 0x4e, 0x83, 0xb8, 0xa5,
	0x67, 0x50, 0x8f, 0x5c, 0xde, 0xa1, 0xc6, 0x4a, 0xfd, 0x89, 0x10, 0x58, 0x5d, 0x1e, 0x83, 0x86,
	0x28, 0xd6, 0x42, 0x10, 0x92, 0xc7, 0x7f, 0xd1, 0x91, 0x97, 0x52, 0x31, 0x6e, 0xe9, 0x53, 0x90,
	0x62, 0xc3, 0xfb, 0x8a, 0xe4, 0xb8, 0x5f, 0x8e, 0x81, 0xe9, 0x5b, 0x63, 0xf1, 0xc0, 0xfc, 0x76,
	0xfe, 0x2b, 0x41, 0x38, 0x2c, 0xd1, 0xaf, 0xbc, 0x77, 0xfe, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x4e,
	0x28, 0xd8, 0xe7, 0xf5, 0x15, 0x00, 0x00,
}
